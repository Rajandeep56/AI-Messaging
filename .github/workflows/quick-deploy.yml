name: Quick Deploy Existing Build

on:
  push:
    branches: [ main, master ]
    paths:
      - 'chatter/**'
  workflow_dispatch:

jobs:
  quick-deploy:
    runs-on: ubuntu-latest
    environment: chatter
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Setup EAS (Skip if token issues)
      run: |
        cd chatter
        # Try to login with EXPO_TOKEN, but don't fail if it doesn't work
        if [ -n "${{ secrets.EXPO_TOKEN }}" ]; then
          echo "Attempting EAS login with token..."
          echo ${{ secrets.EXPO_TOKEN }} | eas login || echo "EAS login failed, continuing without it"
        else
          echo "No EXPO_TOKEN found, skipping EAS login"
        fi
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      
    - name: Download Existing Build
      run: |
        cd chatter
        # Download the existing finished AAB build (saves 1 hour!)
        curl -L -o app-release.aab "https://expo.dev/artifacts/eas/tda4pib5cJeEoAv4PG6JgX.aab"
        echo "✅ Downloaded existing build - no waiting for new build!"
        
        # Also try to get the latest APK build as backup (only if EAS login worked)
        if command -v eas &> /dev/null; then
          echo "Checking if EAS login worked..."
          if eas whoami &> /dev/null; then
            echo "EAS login successful, getting latest APK build..."
            BUILD_URL=$(eas build:list --platform android --limit 1 --json | jq -r '.[0].artifacts.buildUrl') || echo "Could not get APK build URL"
            if [ "$BUILD_URL" != "null" ] && [ -n "$BUILD_URL" ] && [ "$BUILD_URL" != "" ]; then
              curl -L -o app-release.apk "$BUILD_URL"
              echo "✅ Downloaded APK backup"
            else
              echo "No valid APK build URL found"
            fi
          else
            echo "EAS login failed, skipping APK download"
          fi
        else
          echo "EAS CLI not available, using AAB only"
        fi
        
    - name: Setup Firebase
      run: |
        cd chatter
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > firebase-service-account.json
        export GOOGLE_APPLICATION_CREDENTIALS="firebase-service-account.json"
        firebase use ai-msging
        
        # Test Firebase authentication
        firebase projects:list || echo "Firebase authentication may have issues, but continuing..."
      env:
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        
    - name: Deploy to Firebase App Distribution
      run: |
        cd chatter
        echo "🚀 Deploying existing build to Firebase App Distribution..."
        
        # First, ensure testers are added
        firebase appdistribution:testers:add kaurdeep9073@gmail.com || echo "Tester already exists"
        
        # Try to deploy APK first (this method worked)
        if [ -f "app-release.apk" ]; then
          echo "Deploying APK file..."
          firebase appdistribution:distribute app-release.apk \
            --app 1:965784009156:android:de800004fd88a35b410c91 \
            --testers kaurdeep9073@gmail.com \
            --release-notes "Chatter App v1.0.0 - Quick Deploy from GitHub Actions" || {
            echo "APK deployment failed, trying AAB..."
            if [ -f "app-release.aab" ]; then
              firebase appdistribution:distribute app-release.aab \
                --app 1:965784009156:android:de800004fd88a35b410c91 \
                --testers kaurdeep9073@gmail.com \
                --release-notes "Chatter App v1.0.0 - Quick Deploy from GitHub Actions"
            fi
          }
        elif [ -f "app-release.aab" ]; then
          echo "Deploying AAB file..."
          firebase appdistribution:distribute app-release.aab \
            --app 1:965784009156:android:de800004fd88a35b410c91 \
            --testers kaurdeep9073@gmail.com \
            --release-notes "Chatter App v1.0.0 - Quick Deploy from GitHub Actions"
        else
          echo "❌ No build files found!"
          echo "Available files:"
          ls -la *.apk *.aab 2>/dev/null || echo "No APK or AAB files found"
          exit 1
        fi
      env:
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        
    - name: Deploy Web Version
      run: |
        cd chatter
        npm ci
        npm run build:web
        firebase deploy --only hosting
        
    - name: Success Message
      run: |
        echo "🎉 Quick deployment completed!"
        echo "📱 Android app deployed to Firebase App Distribution"
        echo "🌐 Web version deployed to Firebase Hosting"
        echo "⏱️  Total time: ~2 minutes (vs 1+ hour for new build)"
        echo "📧 Testers will receive email invitations" 