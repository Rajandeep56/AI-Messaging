name: Quick Deploy Existing Build

on:
  push:
    branches: [ main, master ]
    paths:
      - 'chatter/**'
  workflow_dispatch:

jobs:
  quick-deploy:
    runs-on: ubuntu-latest
    environment: chatter
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Install EAS CLI
      run: npm install -g eas-cli
      
    - name: Download Existing Build
      run: |
        cd chatter
        # Download the existing finished AAB build (saves 1 hour!)
        curl -L -o app-release.aab "https://expo.dev/artifacts/eas/tda4pib5cJeEoAv4PG6JgX.aab"
        echo "✅ Downloaded existing AAB build - no waiting for new build!"
        
        # Try to get APK build only if we have a valid EXPO_TOKEN
        if [ -n "${{ secrets.EXPO_TOKEN }}" ]; then
          echo "Attempting to get latest APK build..."
          # Try EAS login and build list, but don't fail if it doesn't work
          echo ${{ secrets.EXPO_TOKEN }} | eas login > /dev/null 2>&1 && {
            echo "EAS login successful, getting latest APK..."
            BUILD_URL=$(eas build:list --platform android --limit 1 --json 2>/dev/null | jq -r '.[0].artifacts.buildUrl' 2>/dev/null) && {
              if [ "$BUILD_URL" != "null" ] && [ -n "$BUILD_URL" ] && [ "$BUILD_URL" != "" ]; then
                curl -L -o app-release.apk "$BUILD_URL" && echo "✅ Downloaded APK backup"
              else
                echo "No valid APK build URL found"
              fi
            } || echo "Could not get APK build URL"
          } || echo "EAS login failed, using AAB only"
        else
          echo "No EXPO_TOKEN, using AAB only"
        fi
        
    - name: Setup Firebase
      run: |
        cd chatter
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > firebase-service-account.json
        export GOOGLE_APPLICATION_CREDENTIALS="firebase-service-account.json"
        firebase use ai-msging
        
        # Test Firebase authentication (don't fail if it has issues)
        firebase projects:list > /dev/null 2>&1 || echo "Firebase authentication may have issues, but continuing with deployment..."
      env:
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        
    - name: Deploy to Firebase App Distribution
      run: |
        cd chatter
        echo "🚀 Deploying existing build to Firebase App Distribution..."
        
        # First, ensure testers are added
        firebase appdistribution:testers:add kaurdeep9073@gmail.com || echo "Tester already exists"
        
        # Try to deploy APK first (this method worked)
        if [ -f "app-release.apk" ]; then
          echo "Deploying APK file..."
          firebase appdistribution:distribute app-release.apk \
            --app 1:965784009156:android:de800004fd88a35b410c91 \
            --testers kaurdeep9073@gmail.com \
            --release-notes "Chatter App v1.0.0 - Quick Deploy from GitHub Actions" || {
            echo "APK deployment failed, trying AAB..."
            if [ -f "app-release.aab" ]; then
              firebase appdistribution:distribute app-release.aab \
                --app 1:965784009156:android:de800004fd88a35b410c91 \
                --testers kaurdeep9073@gmail.com \
                --release-notes "Chatter App v1.0.0 - Quick Deploy from GitHub Actions"
            fi
          }
        elif [ -f "app-release.aab" ]; then
          echo "Deploying AAB file..."
          firebase appdistribution:distribute app-release.aab \
            --app 1:965784009156:android:de800004fd88a35b410c91 \
            --testers kaurdeep9073@gmail.com \
            --release-notes "Chatter App v1.0.0 - Quick Deploy from GitHub Actions"
        else
          echo "❌ No build files found!"
          echo "Available files:"
          ls -la *.apk *.aab 2>/dev/null || echo "No APK or AAB files found"
          exit 1
        fi
      env:
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        
    - name: Deploy Web Version
      run: |
        cd chatter
        npm ci
        npm run build:web
        firebase deploy --only hosting
        
    - name: Success Message
      run: |
        echo "🎉 Quick deployment completed!"
        echo "📱 Android app deployed to Firebase App Distribution"
        echo "🌐 Web version deployed to Firebase Hosting"
        echo "⏱️  Total time: ~2 minutes (vs 1+ hour for new build)"
        echo "📧 Testers will receive email invitations" 